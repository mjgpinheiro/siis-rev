{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"MODE",
				"MODE_IND_MARGIN"
			],
			[
				"CON",
				"CONTRACT_WARRANT"
			],
			[
				"CONT",
				"CONTRACT_TURBO"
			],
			[
				"contract",
				"contract_type"
			],
			[
				"_mo",
				"_monitor_thread"
			],
			[
				"arg",
				"argv"
			],
			[
				"_",
				"_identifier"
			],
			[
				"stra",
				"strategy_client"
			],
			[
				"strat",
				"strategy_client"
			],
			[
				"pos",
				"position_id"
			],
			[
				"crea",
				"create"
			],
			[
				"last",
				"last_ohlc_by_timeframe"
			],
			[
				"las",
				"last_update_time"
			],
			[
				"_last",
				"_last_ohlc"
			],
			[
				"_su",
				"_subscriptions"
			],
			[
				"_ma",
				"_market_id"
			],
			[
				"_sub",
				"_sub_id"
			],
			[
				"sub",
				"sub_key"
			],
			[
				"_ig",
				"_ig_tick_subscriptions"
			],
			[
				"__g",
				"_ig_tick_subscriptions"
			],
			[
				"tie",
				"timeframes"
			],
			[
				"base",
				"base_time"
			],
			[
				"MSG",
				"MSG_OHLC"
			],
			[
				"unc",
				"unlock"
			],
			[
				"dat",
				"datetime"
			],
			[
				"tran",
				"transactions"
			],
			[
				"conn",
				"_connector"
			],
			[
				"ini",
				"init"
			],
			[
				"__",
				"__password"
			],
			[
				"_cu",
				"_currency_ratio"
			],
			[
				"mark",
				"market_info"
			],
			[
				"mar",
				"market_id"
			],
			[
				"curr",
				"currency_market"
			],
			[
				"_ac",
				"_account"
			],
			[
				"fetch_an",
				"fetch_any_assets"
			],
			[
				"fetch",
				"fetch_any_orders"
			],
			[
				"fet",
				"fetch_order"
			],
			[
				"fetcha",
				"fetch_asset"
			],
			[
				"conf",
				"configured_markets"
			],
			[
				"con",
				"connect"
			],
			[
				"co",
				"connector"
			],
			[
				"connectors",
				"connectors"
			],
			[
				"ass",
				"asset_id"
			],
			[
				"market",
				"market_id"
			],
			[
				"res",
				"resolution"
			],
			[
				"ru",
				"run_once"
			],
			[
				"che",
				"check_exit"
			],
			[
				"_so",
				"_socketRep"
			],
			[
				"data",
				"database"
			],
			[
				"conne",
				"connectors"
			],
			[
				"def",
				"default"
			],
			[
				"op",
				"options"
			],
			[
				"sig",
				"sig_int_time"
			],
			[
				"siis",
				"siis_logger"
			],
			[
				"has",
				"has_exception"
			],
			[
				"parse_c",
				"parse_connector_spec"
			],
			[
				"run",
				"running"
			],
			[
				"from",
				"from_date"
			],
			[
				"tim",
				"timeframe"
			],
			[
				"valu",
				"value_per_pip"
			],
			[
				"use",
				"use_quote"
			],
			[
				"on",
				"one_pip_means"
			],
			[
				"tick",
				"tickSize"
			],
			[
				"mak",
				"market_id"
			],
			[
				"acc",
				"account_data"
			],
			[
				"ba",
				"base_time"
			],
			[
				"end",
				"ended_candle"
			],
			[
				"cand",
				"candles"
			],
			[
				"trade",
				"trade_rate"
			],
			[
				"id",
				"identity"
			],
			[
				"it",
				"item_update"
			],
			[
				"current",
				"current_position"
			],
			[
				"red",
				"reduce_only"
			],
			[
				"cur",
				"current_position"
			],
			[
				"en",
				"entry_price"
			],
			[
				"entr",
				"entry_price"
			],
			[
				"exec",
				"exec-price"
			],
			[
				"ord",
				"order_id"
			],
			[
				"tra",
				"trailing-stop"
			],
			[
				"trailin",
				"trailing_stop"
			],
			[
				"prof",
				"profit_loss_rate"
			],
			[
				"pro",
				"profit_loss_rate"
			],
			[
				"exe",
				"exec-price"
			],
			[
				"stop",
				"stop_ref_oid"
			],
			[
				"lim",
				"limit_oid"
			],
			[
				"create",
				"create_oid"
			],
			[
				"STATE_",
				"STATE_PARTIALLY_FILLED"
			],
			[
				"creat",
				"create_ref_oid"
			],
			[
				"order",
				"order_id"
			],
			[
				"inst",
				"instrument"
			],
			[
				"lot",
				"lot_size"
			],
			[
				"margi",
				"margin_factor"
			],
			[
				"rea",
				"realized"
			],
			[
				"_ba",
				"_base_exchange_rate"
			],
			[
				"_mar",
				"_margin_factor"
			],
			[
				"_co",
				"_contract_size"
			],
			[
				"map",
				"mapped_symbol"
			],
			[
				"trad",
				"trader_quantity"
			],
			[
				"orde",
				"order_data"
			],
			[
				"Cre",
				"create_ref_oid"
			],
			[
				"ref",
				"ref_order_id"
			],
			[
				"li",
				"limit_oid"
			],
			[
				"cre",
				"create_oid"
			],
			[
				"limit",
				"limit_ref_oid"
			],
			[
				"dir",
				"direction"
			],
			[
				"sign",
				"signal_price"
			],
			[
				"marke",
				"market_id"
			],
			[
				"he",
				"hedging"
			],
			[
				"si",
				"signal_price"
			],
			[
				"volu",
				"volumes"
			],
			[
				"majo",
				"major_trend"
			],
			[
				"sma",
				"sma55"
			],
			[
				"par",
				"parent_timeframe"
			],
			[
				"pri",
				"prices"
			],
			[
				"TF_F",
				"TF_FIFTEEN_MIN"
			],
			[
				"TF_",
				"TF_HOUR"
			],
			[
				"TF",
				"TF_FIFTEEN_MIN"
			],
			[
				"ret",
				"retained_exits"
			],
			[
				"exit",
				"exits"
			],
			[
				"time",
				"timeframe"
			],
			[
				"retaine",
				"retained_entry"
			],
			[
				"_pr",
				"_prev_agg_cd"
			],
			[
				"e",
				"eight"
			],
			[
				"_ag",
				"_agg_cd"
			],
			[
				"vol",
				"volumes"
			],
			[
				"_wm",
				"_wmas"
			],
			[
				"_pre",
				"_prev_cd"
			],
			[
				"_la",
				"_last_count"
			]
		]
	},
	"buffers":
	[
		{
			"file": "strategies/src/strategies/forexalpha/faparameters.h",
			"settings":
			{
				"buffer_size": 4667,
				"line_ending": "Unix"
			}
		},
		{
			"file": "connectors/database/database.py",
			"settings":
			{
				"buffer_size": 15140,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "connectors/database/pgsql.py",
			"settings":
			{
				"buffer_size": 27354,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# @date 2018-08-07\n# @author Frederic SCHERMA\n# @license Copyright (c) 2018 Dream Overflow\n# Storage service, mysql implementation\n\nimport os\nimport json\nimport time\nimport datetime\nimport threading\nimport copy\nimport traceback\nimport pathlib\nimport MySQLdb\n\nfrom market import Market\nfrom trader.asset import Asset\n\nfrom database.tickdb import TickStorage, TickStreamer\nfrom database.ohlcdb import OhlcStorage, OhlcStreamer\n\nfrom database.database import Database\n\nimport logging\nlogger = logging.getLogger('siis.database')\n\n\nclass MySql(Database):\n    \"\"\"\n    Storage service, mysql implementation.\n    @todo for ohlc storage use a bulk insert !\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._db = None\n\n    def connect(self, config):\n        self._db = MySQLdb.connect(\n            db=config.get('name', \"siis\"),\n            host=config.get('host', \"localhost\"),\n            port=config.get('port', 3306),\n            user=config.get('user', \"siis\"),\n            passwd=config.get('password', \"siis\"),\n            connect_timeout=5)\n\n    def disconnect(self):\n        # postresql db\n        if self._db:\n            self._db.close()\n            self._db = None\n\n    def setup_market_sql(self):\n        cursor = self._db.cursor()\n\n        # market table\n        cursor.execute(\"SHOW TABLES LIKE 'market'\")\n        if len(cursor.fetchall()) > 0:\n            return\n\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS market(\n                id BIGINT AUTO_INCREMENT PRIMARY KEY,\n                broker_id VARCHAR(255) NOT NULL, market_id VARCHAR(255) NOT NULL, symbol VARCHAR(32) NOT NULL,\n                market_type INTEGER NOT NULL DEFAULT 0, unit_type INTEGER NOT NULL DEFAULT 0, contract_type INTEGER NOT NULL DEFAULT 0,\n                trade_type INTEGER NOT NULL DEFAULT 0, orders INTEGER NOT NULL DEFAULT 0,\n                base VARCHAR(32) NOT NULL, base_display VARCHAR(32) NOT NULL, base_precision VARCHAR(32) NOT NULL,\n                quote VARCHAR(32) NOT NULL, quote_display VARCHAR(32) NOT NULL, quote_precision VARCHAR(32) NOT NULL,\n                expiry VARCHAR(32) NOT NULL, timestamp BIGINT NOT NULL,\n                lot_size VARCHAR(32) NOT NULL, contract_size VARCHAR(32) NOT NULL, base_exchange_rate VARCHAR(32) NOT NULL,\n                value_per_pip VARCHAR(32) NOT NULL, one_pip_means VARCHAR(32) NOT NULL, margin_factor VARCHAR(32) NOT NULL DEFAULT '1.0',\n                min_size VARCHAR(32) NOT NULL, max_size VARCHAR(32) NOT NULL, step_size VARCHAR(32) NOT NULL,\n                min_notional VARCHAR(32) NOT NULL, max_notional VARCHAR(32) NOT NULL, step_notional VARCHAR(32) NOT NULL,\n                min_price VARCHAR(32) NOT NULL, max_price VARCHAR(32) NOT NULL, step_price VARCHAR(32) NOT NULL,\n                maker_fee VARCHAR(32) NOT NULL DEFAULT '0', taker_fee VARCHAR(32) NOT NULL DEFAULT '0',\n                maker_commission VARCHAR(32) NOT NULL DEFAULT '0', taker_commission VARCHAR(32) NOT NULL DEFAULT '0',\n                UNIQUE KEY(broker_id, market_id))\"\"\")\n\n        self._db.commit()\n\n    def setup_userdata_sql(self):\n        cursor = self._db.cursor()\n\n        # asset table\n        cursor.execute(\"SHOW TABLES LIKE 'asset'\")\n        if len(cursor.fetchall()) > 0:\n            return\n\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS asset(\n                id BIGINT AUTO_INCREMENT PRIMARY KEY,\n                broker_id VARCHAR(255) NOT NULL, asset_id VARCHAR(255) NOT NULL,\n                last_trade_id VARCHAR(32) NOT NULL, timestamp BIGINT NOT NULL, \n                quantity VARCHAR(32) NOT NULL, price VARCHAR(32) NOT NULL, quote_symbol VARCHAR(32) NOT NULL,\n                UNIQUE KEY(broker_id, asset_id))\"\"\")\n\n        # trade table\n        cursor.execute(\"SHOW TABLES LIKE 'user_trade'\")\n        if len(cursor.fetchall()) > 0:\n            return\n\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS user_trade(\n                id SERIAL PRIMARY KEY,\n                broker_id VARCHAR(255) NOT NULL, market_id VARCHAR(255) NOT NULL, appliance_id VARCHAR(255) NOT NULL,\n                trade_id INTEGER NOT NULL,\n                data TEXT NOT NULL DEFAULT '{}',\n                operations TEXT NOT NULL DEFAULT '{}',\n                UNIQUE KEY(broker_id, market_id, appliance_id, trade_id))\"\"\")\n\n        # trader table\n        cursor.execute(\"SHOW TABLES LIKE 'user_trader'\")\n        if len(cursor.fetchall()) > 0:\n            return\n\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS user_trader(\n                id SERIAL PRIMARY KEY,\n                broker_id VARCHAR(255) NOT NULL, market_id VARCHAR(255) NOT NULL, appliance_id VARCHAR(255) NOT NULL,\n                activity INTEGER NOT NULL DEFAULT 1,\n                data TEXT NOT NULL DEFAULT '{}',\n                regions TEXT NOT NULL DEFAULT '{}',\n                UNIQUE KEY(broker_id, market_id, appliance_id))\"\"\")\n\n        self._db.commit()\n\n    def setup_ohlc_sql(self):\n        cursor = self._db.cursor()\n\n        # ohlc table\n        cursor.execute(\"SHOW TABLES LIKE 'ohlc'\")\n        if len(cursor.fetchall()) > 0:\n            return\n\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS ohlc(\n                id BIGINT AUTO_INCREMENT PRIMARY KEY,\n                broker_id VARCHAR(255) NOT NULL, market_id VARCHAR(255) NOT NULL,\n                timestamp BIGINT NOT NULL, timeframe INTEGER NOT NULL,\n                bid_open VARCHAR(32) NOT NULL, bid_high VARCHAR(32) NOT NULL, bid_low VARCHAR(32) NOT NULL, bid_close VARCHAR(32) NOT NULL,\n                ask_open VARCHAR(32) NOT NULL, ask_high VARCHAR(32) NOT NULL, ask_low VARCHAR(32) NOT NULL, ask_close VARCHAR(32) NOT NULL,\n                volume VARCHAR(48) NOT NULL,\n                UNIQUE KEY(broker_id, market_id, timestamp, timeframe))\"\"\")\n\n        self._db.commit()\n\n    def create_ohlc_streamer(self, broker_id, market_id, timeframe, from_date, to_date, buffer_size=8192):\n        \"\"\"\n        Create a new ohlc streamer.\n        \"\"\"\n        return OhlcStreamer(self._db, timeframe, broker_id, market_id, from_date, to_date, buffer_size)\n\n    #\n    # Processing\n    #\n\n    def process_market(self):\n        #\n        # insert market info\n        #\n\n        self.lock()\n        mki = self._pending_market_info_insert\n        self._pending_market_info_insert = []\n        self.unlock()\n\n        if mki:\n            try:\n                cursor = self._db.cursor()\n\n                for mi in mki:\n                    if mi[16] is None:\n                        # margin factor is unavailable when market is down, so use previous value if available\n                        cursor.execute(\"\"\"SELECT margin_factor FROM market WHERE broker_id = '%s' AND market_id = '%s'\"\"\" % (mi[0], mi[1]))\n                        row = cursor.fetchone()\n\n                        if row:\n                            # replace by previous margin factor from the DB\n                            margin_factor = row[0]\n                            mi = list(mi)\n                            mi[16] = margin_factor\n\n                    cursor.execute(\"\"\"INSERT INTO market(broker_id, market_id, symbol,\n                                        market_type, unit_type, contract_type,\n                                        trade_type, orders,\n                                        base, base_display, base_precision,\n                                        quote, quote_display, quote_precision,\n                                        expiry, timestamp,\n                                        lot_size, contract_size, base_exchange_rate,\n                                        value_per_pip, one_pip_means, margin_factor,\n                                        min_size, max_size, step_size,\n                                        min_notional, max_notional, step_notional,\n                                        min_price, max_price, step_price,\n                                        maker_fee, taker_fee, maker_commission, taker_commission) \n                                    VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                                    ON DUPLICATE KEY UPDATE symbol = %s,\n                                        market_type = %s, unit_type = %s, contract_type = %s,\n                                        trade_type = %s, orders = %s,\n                                        base = %s, base_display = %s, base_precision = %s,\n                                        quote = %s, quote_display = %s, quote_precision = %s,\n                                        expiry = %s, timestamp = %s,\n                                        lot_size = %s, contract_size = %s, base_exchange_rate = %s,\n                                        value_per_pip = %s, one_pip_means = %s, margin_factor = %s,\n                                        min_size = %s, max_size = %s, step_size = %s,\n                                        min_notional = %s, max_notional = %s, step_notional = %s,\n                                        min_price = %s, max_price = %s, step_price = %s,\n                                        maker_fee = %s, taker_fee = %s, maker_commission = %s, taker_commission = %s\"\"\",\n                                    (*mi, *mi[2:]))\n\n                self._db.commit()\n            except Exception as e:\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_market_info_insert = mki + self._pending_market_info_insert\n                self.unlock()\n\n        #\n        # select market info\n        #\n\n        self.lock()\n        mis = self._pending_market_info_select\n        self._pending_market_info_select = []\n        self.unlock()\n\n        if mis:\n            try:\n                cursor = self._db.cursor()\n\n                for mi in mis:\n                    cursor.execute(\"\"\"SELECT symbol,\n                                        market_type, unit_type, contract_type,\n                                        trade_type, orders,\n                                        base, base_display, base_precision,\n                                        quote, quote_display, quote_precision,\n                                        expiry, timestamp,\n                                        lot_size, contract_size, base_exchange_rate,\n                                        value_per_pip, one_pip_means, margin_factor,\n                                        min_size, max_size, step_size,\n                                        min_notional, max_notional, step_notional,\n                                        min_price, max_price, step_price,\n                                        maker_fee, taker_fee, maker_commission, taker_commission FROM market\n                                    WHERE broker_id = '%s' AND market_id = '%s'\"\"\" % (\n                                        mi[1], mi[2]))\n\n                    row = cursor.fetchone()\n\n                    if row:\n                        market_info = Market(mi[2], row[0])\n\n                        market_info.is_open = True\n\n                        market_info.market_type = row[1]\n                        market_info.unit_type = row[2]\n                        market_info.contract_type = row[3]\n\n                        market_info.trade = row[4]\n                        market_info.orders = row[5]\n\n                        market_info.set_base(row[6], row[7], int(row[8]))\n                        market_info.set_quote(row[9], row[10], int(row[11]))\n\n                        market_info.expiry = row[12]\n                        market_info.last_update_time = row[13]\n\n                        market_info.lot_size = float(row[14])\n                        market_info.contract_size = float(row[15])\n                        market_info.base_exchange_rate = float(row[16])\n                        market_info.value_per_pip = float(row[17])\n                        market_info.one_pip_means = float(row[18])\n\n                        if row[19] is not None or row[19] is not 'None':\n                            if row[19] == '-':  # not defined mean 1.0 or no margin\n                                market_info.margin_factor = 1.0\n                            else:\n                                market_info.margin_factor = float(row[19])\n\n                        market_info.set_size_limits(float(row[20]), float(row[21]), float(row[22]))\n                        market_info.set_notional_limits(float(row[23]), float(row[24]), float(row[25]))\n                        market_info.set_price_limits(float(row[26]), float(row[27]), float(row[28]))\n\n                        market_info.maker_fee = float(row[29])\n                        market_info.taker_fee = float(row[30])\n\n                        market_info.maker_commission = float(row[31])\n                        market_info.taker_commission = float(row[32])\n                    else:\n                        market_info = None\n\n                    # notify\n                    mi[0].notify(Signal.SIGNAL_MARKET_INFO_DATA, mi[1], (mi[2], market_info))\n            except Exception as e:\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_market_info_select = mis + self._pending_market_info_select\n                self.unlock()\n\n        #\n        # select market list\n        #\n\n        self.lock()\n        mls = self._pending_market_list_select\n        self._pending_market_list_select = []\n        self.unlock()\n\n        if mls:\n            try:\n                cursor = self._db.cursor()\n\n                for m in mls:\n                    cursor.execute(\"\"\"SELECT market_id, symbol, base, quote FROM market WHERE broker_id = '%s'\"\"\" % (m[1],))\n\n                    rows = cursor.fetchall()\n\n                    market_list = []\n\n                    for row in rows:\n                        market_list.append(row)\n\n                    # notify\n                    m[0].notify(Signal.SIGNAL_MARKET_LIST_DATA, m[1], market_list)\n            except Exception as e:\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_market_list_select = mls + self._pending_market_list_select\n                self.unlock()\n\n    def process_userdata(self):\n        #\n        # inset asset\n        #\n        self.lock()\n        uai = self._pending_asset_insert\n        self._pending_asset_insert = []\n        self.unlock()\n\n        if uai:\n            try:\n                cursor = self._db.cursor()\n\n                for ua in uai:\n                    cursor.execute(\"\"\"\n                        INSERT INTO asset(broker_id, asset_id, last_trade_id, timestamp, quantity, price, quote_symbol)\n                            VALUES(%s, %s, %s, %s, %s, %s, %s)\n                        ON DUPLICATE KEY UPDATE \n                            last_trade_id = %s, timestamp = %s, quantity = %s, price = %s, quote_symbol = %s\"\"\", (*ua, *ua[2:]))\n\n                self._db.commit()\n            except Exception as e:\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_asset_insert = uai + self._pending_asset_insert\n                self.unlock()\n\n        #\n        # select asset\n        #\n\n        self.lock()\n        uas = self._pending_asset_select\n        self._pending_asset_select = []\n        self.unlock()\n\n        if uas:\n            try:\n                cursor = self._db.cursor()\n\n                for ua in uas:\n                    cursor.execute(\"\"\"SELECT asset_id, last_trade_id, timestamp, quantity, price, quote_symbol FROM asset WHERE broker_id = '%s'\"\"\" % (ua[2]))\n\n                    rows = cursor.fetchall()\n\n                    assets = []\n\n                    for row in rows:\n                        asset = Asset(ua[1], row[0])\n\n                        # only a sync will tell which quantity is free, which one is locked\n                        asset.update_price(float(row[2]) * 0.001, row[1], float(row[4]), row[5])\n                        asset.set_quantity(0.0, float(row[3]))\n\n                        assets.append(asset)\n\n                    # notify\n                    ua[0].notify(Signal.SIGNAL_ASSET_DATA_BULK, ua[2], assets)\n            except Exception as e:\n                # check database for valid ohlc and volumes\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_asset_select = uas + self._pending_asset_select\n                self.unlock()\n\n        #\n        # insert user_trade\n        #\n        \n        self.lock()\n        uti = self._pending_user_trade_insert\n        self._pending_user_trade_insert = []\n        self.unlock()\n\n        if uti:\n            try:\n                cursor = self._db.cursor()\n\n                query = ' '.join((\n                    \"INSERT INTO user_trade(broker_id, market_id, appliance_id, trade_id, trade_type, data, operations) VALUES\",\n                    ','.join([\"('%s', '%s', %s, %i, %i, '%s', '%s')\" % (ut[0], ut[1], ut[2], ut[3], ut[4],\n                        str(ut[5]).replace(\"'\", \"\\'\"), str(ut[6]).replace(\"'\", \"\\'\")) for ut in uti]),\n                    \"ON DUPLICATE KEY UPDATE data = VALUES(data), operations = VALUES(operations)\"\n                ))\n\n                cursor.execute(query)\n\n                self._db.commit()\n            except Exception as e:\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_user_trade_insert = uti + self._pending_user_trade_insert\n                self.unlock()\n\n        #\n        # select user_trade\n        #\n\n        self.lock()\n        uts = self._pending_user_trade_select\n        self._pending_user_trade_select = []\n        self.unlock()\n\n        if uts:\n            try:\n                cursor = self._db.cursor()\n\n                for ut in uts:\n                    cursor.execute(\"\"\"SELECT trade_id, trade_type, data, operations FROM user_trade WHERE\n                        appliance_id = '%s' AND broker_id = '%s' AND market_id = '%s'\"\"\" % (ut[2], ut[3], ut[4]))\n\n                    rows = cursor.fetchall()\n\n                    user_trades = []\n\n                    for row in rows:\n                        user_trades.append((row[0], row[1], json.loads(row[2]), json.loads(row[3])))\n\n                    # notify\n                    ut[0].notify(Signal.SIGNAL_STRATEGY_TRADE_LIST, ut[2], user_trades)\n            except Exception as e:\n                # check database for valid ohlc and volumes\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_user_trade_select = uts + self._pending_user_trade_select\n                self.unlock()\n\n        #\n        # insert trader\n        #\n\n        self.lock()\n        uti = self._pending_user_trader_insert\n        self._pending_user_trader_insert = []\n        self.unlock()\n\n        if uti:\n            try:\n                cursor = self._db.cursor()\n\n                query = ' '.join((\n                    \"INSERT INTO user_trader(broker_id, market_id, appliance_id, activity, data, regions) VALUES\",\n                    ','.join([\"('%s', '%s', '%s', %i, '%s', '%s')\" % (ut[0], ut[1], ut[2], 1 if ut[3] else 0,\n                            str(ut[4]).replace(\"'\", \"\\'\"), str(ut[5]).replace(\"'\", \"\\'\")) for ut in uti]),\n                    \"ON DUPLICATE KEY UPDATE activity = VALUES(activity), data = VALUES(data), regions = VALUES(regions)\"\n                ))\n\n                cursor.execute(query)\n\n                self._db.commit()\n            except Exception as e:\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_user_trader_insert = uti + self._pending_user_trader_insert\n                self.unlock()\n\n        #\n        # select trader\n        #\n\n        self.lock()\n        uts = self._pending_user_trader_select\n        self._pending_user_trader_select = []\n        self.unlock()\n\n        if uts:\n            try:\n                cursor = self._db.cursor()\n\n                for ut in uts:\n                    cursor.execute(\"\"\"SELECT activity, data, regions FROM user_trader WHERE\n                        appliance_id = '%s' AND broker_id = '%s' AND market_id = '%s'\"\"\" % (ut[2], ut[3], ut[4]))\n\n                    rows = cursor.fetchall()\n\n                    user_traders = []\n\n                    for row in rows:\n                        user_traders.append((row[0], row[1], activity, json.loads(row[2]), json.loads(row[3])))\n\n                    # notify\n                    ut[0].notify(Signal.SIGNAL_STRATEGY_TRADER_DATA, ut[2], user_traders)\n            except Exception as e:\n                # check database for valid ohlc and volumes\n                logger.error(repr(e))\n\n                # retry the next time\n                self.lock()\n                self._pending_user_trade_select = uts + self._pending_user_trade_select\n                self.unlock()\n\n    def process_ohlc(self):       \n        #\n        # select market ohlcs\n        #\n\n        self.lock()\n        mks = copy.copy(self._pending_ohlc_select)\n        self._pending_ohlc_select.clear()\n        self.unlock()\n\n        try:\n            cursor = self._db.cursor()\n\n            for mk in mks:\n                if mk[6]:\n                    # last n\n                    cursor.execute(\"\"\"SELECT COUNT(*) FROM ohlc WHERE broker_id = '%s' AND market_id = '%s' AND timeframe = %s\"\"\" % (mk[1], mk[2], mk[3]))\n                    count = int(cursor.fetchone()[0])\n                    offset = max(0, count - mk[6])\n\n                    # LIMIT should not be necessary then\n                    cursor.execute(\"\"\"SELECT timestamp, bid_open, bid_high, bid_low, bid_close, ask_open, ask_high, ask_low, ask_close, volume FROM ohlc\n                                    WHERE broker_id = '%s' AND market_id = '%s' AND timeframe = %s ORDER BY timestamp ASC LIMIT %i OFFSET %i\"\"\" % (\n                                        mk[1], mk[2], mk[3], mk[6], offset))\n                elif mk[4] and mk[5]:\n                    # from to\n                    cursor.execute(\"\"\"SELECT timestamp, bid_open, bid_high, bid_low, bid_close, ask_open, ask_high, ask_low, ask_close, volume FROM ohlc\n                                    WHERE broker_id = '%s' AND market_id = '%s' AND timeframe = %s AND timestamp >= %i AND timestamp <= %i ORDER BY timestamp ASC\"\"\" % (\n                                        mk[1], mk[2], mk[3], mk[4], mk[5]))\n                elif mk[4]:\n                    # from to now\n                    cursor.execute(\"\"\"SELECT timestamp, bid_open, bid_high, bid_low, bid_close, ask_open, ask_high, ask_low, ask_close, volume FROM ohlc\n                                    WHERE broker_id = '%s' AND market_id = '%s' AND timeframe = %s AND timestamp >= %i ORDER BY timestamp ASC\"\"\" % (\n                                        mk[1], mk[2], mk[3], mk[4]))\n                elif mk[5]:\n                    # to now\n                    cursor.execute(\"\"\"SELECT timestamp, bid_open, bid_high, bid_low, bid_close, ask_open, ask_high, ask_low, ask_close, volume FROM ohlc\n                                    WHERE broker_id = '%s' AND market_id = '%s' AND timeframe = %s AND timestamp <= %i ORDER BY timestamp ASC\"\"\" % (\n                                        mk[1], mk[2], mk[3], mk[5]))\n                else:\n                    # all\n                    cursor.execute(\"\"\"SELECT timestamp, bid_open, bid_high, bid_low, bid_close, ask_open, ask_high, ask_low, ask_close, volume FROM ohlc\n                                    WHERE broker_id = '%s' AND market_id = '%s' AND timeframe = %s ORDER BY timestamp ASC\"\"\" % (\n                                        mk[1], mk[2], mk[3]))\n\n                rows = cursor.fetchall()\n\n                ohlcs = []\n\n                for row in rows:\n                    timestamp = float(row[0]) / 1000.0  # to float second timestamp\n                    ohlc = Candle(timestamp, mk[3])\n\n                    ohlc.set_bid_ohlc(float(row[1]), float(row[2]), float(row[3]), float(row[4]))\n                    ohlc.set_ofr_ohlc(float(row[5]), float(row[6]), float(row[7]), float(row[8]))\n\n                    # if float(row[9]) <= 0:\n                    #   # prefer to ignore empty volume ohlc because it can broke volume signal and it is a no way but it could be\n                    #   # a lack of this information like on SPX500 of ig.com. So how to manage that cases...\n                    #   continue\n\n                    ohlc.set_volume(float(row[9]))\n\n                    ohlcs.append(ohlc)\n\n                # notify\n                mk[0].notify(Signal.SIGNAL_CANDLE_DATA_BULK, mk[1], (mk[2], mk[3], ohlcs))\n        except Exception as e:\n            # check database for valide ohlc and volumes\n            logger.error(repr(e))\n\n            # retry the next time\n            self.lock()\n            self._pending_ohlc_select = mks + self._pending_ohlc_select\n            self.unlock()\n\n        #\n        # insert market ohlcs\n        #\n\n        if time.time() - self._last_ohlc_flush >= 60 or len(self._pending_ohlc_insert) > 500:\n            self.lock()\n            mkd = self._pending_ohlc_insert\n            self._pending_ohlc_insert = []\n            self.unlock()\n\n            if mkd:\n                try:\n                    cursor = self._db.cursor()\n\n                    query = ' '.join((\n                        \"INSERT INTO ohlc(broker_id, market_id, timestamp, timeframe, bid_open, bid_high, bid_low, bid_close, ask_open, ask_high, ask_low, ask_close, volume) VALUES\",\n                        ','.join([\"('%s', '%s', %i, %i, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')\" % (mk[0], mk[1], mk[2], mk[3], mk[4], mk[5], mk[6], mk[7], mk[8], mk[9], mk[10], mk[11], mk[12]) for mk in mkd]),\n                        \"ON DUPLICATE KEY UPDATE bid_open = VALUES(bid_open), bid_high = VALUES(bid_high), bid_low = VALUES(bid_low), bid_close = VALUES(bid_close), ask_open = VALUES(ask_open), ask_high = VALUES(ask_high), ask_low = VALUES(ask_low), ask_close = VALUES(ask_close), volume = VALUES(volume)\"\n                    ))\n\n                    cursor.execute(query)\n\n                    self._db.commit()\n                except Exception as e:\n                    logger.error(repr(e))\n\n                    # retry the next time\n                    self.lock()\n                    self._pending_ohlc_insert = mkd + self._pending_ohlc_insert\n                    self.unlock()\n\n                self._last_ohlc_flush = time.time()\n\n        #\n        # clean older ohlcs\n        #\n\n        if time.time() - self._last_ohlc_clean >= OhlcStorage.CLEANUP_DELAY:\n            try:\n                now = time.time()\n                cursor = self._db.cursor()\n\n                for timeframe, timestamp in OhlcStorage.CLEANERS:\n                    ts = int(now - timestamp) * 1000\n                    # @todo make a count before\n                    cursor.execute(\"DELETE FROM ohlc WHERE timeframe <= %i AND timestamp < %i\" % (timeframe, ts))\n\n                self._db.commit()\n            except Exception as e:\n                logger.error(repr(e))\n\n            self._last_ohlc_clean = time.time()\n",
			"file": "connectors/database/mysql.py",
			"file_size": 27432,
			"file_write_time": 132067142832866351,
			"settings":
			{
				"buffer_size": 27440,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "connectors/connectors/ig/trader.py",
			"settings":
			{
				"buffer_size": 5071,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "connectors/connectorserver.py",
			"settings":
			{
				"buffer_size": 11664,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/frederic/.siis/config/connectors/igdemo.json",
			"settings":
			{
				"buffer_size": 909,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "connectors/trader/trader.py",
			"settings":
			{
				"buffer_size": 18267,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"rst",
				"Set Syntax: reStructuredText"
			],
			[
				"mar",
				"Set Syntax: Markdown"
			],
			[
				"rest",
				"Set Syntax: reStructuredText"
			],
			[
				"cmake",
				"Set Syntax: CMakeEditor"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"cmak",
				"Package Control: List Unmanaged Packages"
			],
			[
				"Snippet: ",
				"Snippet: #!/usr/bin/env"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/frederic/dev/trading/siis-rev",
		"/home/frederic/dev/trading/siis-rev/connectors",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig",
		"/home/frederic/dev/trading/siis-rev/strategies",
		"/home/frederic/dev/trading/siis-rev/strategies/config",
		"/home/frederic/dev/trading/siis-rev/strategies/include",
		"/home/frederic/dev/trading/siis-rev/strategies/include/siis"
	],
	"file_history":
	[
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig/connector.py",
		"/home/frederic/dev/trading/siis-rev/connectors/database/database.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connector.py",
		"/home/frederic/dev/trading/siis-rev/connectors/database/pgsql.py",
		"/home/frederic/dev/trading/siis-rev/connectors/database/mysql.py",
		"/home/frederic/dev/trading/siis-rev/strategies/src/config/strategyconfig.cpp",
		"/home/frederic/dev/trading/siis-rev/strategies/src/strategies/forexalpha/faparameters.h",
		"/home/frederic/dev/trading/siis-rev/strategies/src/strategy.cpp",
		"/home/frederic/dev/trading/siis-rev/sql/initpg.sql",
		"/home/frederic/dev/trading/siis-rev/sql/initmy.sql",
		"/home/frederic/.siis/config/appliance.py",
		"/home/frederic/dev/trading/siis-rev/connectors/market.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/bitfinex/__init__.py",
		"/home/frederic/dev/trading/siis-rev/strategies/include/siis/market.h",
		"/home/frederic/dev/trading/siis-rev/connectors/handler.py",
		"/home/frederic/dev/trading/siis-rev/strategies/config/strategy.json.template",
		"/home/frederic/dev/trading/siis-rev/connectors/defaulthandler.py",
		"/home/frederic/dev/trading/siis-rev/connectors/strategyclient.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messageaccount.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messageasset.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messageohlc.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messageorder.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messageposition.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messagestatus.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messageunsubscribe.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messagetick.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messagesubscribe.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messagelistorders.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messagecloseposition.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messagecore.py",
		"/home/frederic/dev/trading/siis-rev/connectors/messages/messagecreateorder.py",
		"/home/frederic/dev/trading/siis-rev/strategies/include/siis/trade/indmargintrade.h",
		"/home/frederic/dev/trading/siis.venv/lib/python3.7/site-packages/zmq/utils/constant_names.py",
		"/home/frederic/.siis/config/connectors/binancereal.json",
		"/home/frederic/.siis/config/connectors/igreal.json",
		"/home/frederic/.siis/config/connectors/bitmexdemo.json",
		"/home/frederic/.siis/config/connectors/bitmexreal.json",
		"/home/frederic/.siis/config/connectors/igdemo.json",
		"/home/frederic/dev/trading/siis-rev/connectors/main.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connectorserver.py",
		"/home/frederic/dev/trading/siis-rev/connectors/trader/order.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig/account.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig/trader.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig/rest.py",
		"/home/frederic/dev/trading/siis-rev/connectors/common/utils.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig/lightstreamer.py",
		"/home/frederic/dev/trading/siis-rev/connectors/constants.py",
		"/home/frederic/dev/trading/siis-rev/strategies/src/connector/stdtraderproxy.cpp",
		"/home/frederic/dev/trading/siis-rev/strategies.old/include/siis/connector/stdtraderproxy.h",
		"/home/frederic/dev/trading/siis-rev/strategies/src/connector/traderproxy.cpp",
		"/home/frederic/dev/trading/siis-rev/connectors/trader/account.py",
		"/home/frederic/dev/trading/igmarkets.txt",
		"/home/frederic/dev/trading/siis-rev/connectors/trader/paper.py",
		"/home/frederic/dev/trading/siis-rev/connectors/trader/position.py",
		"/home/frederic/dev/trading/siis-rev/connectors/trader/trader.py",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig/utils.py",
		"/home/frederic/dev/trading/siis-rev/strategies/include/siis/constants.h",
		"/home/frederic/dev/trading/siis-rev/connectors/connectors/ig/__init__.py",
		"/home/frederic/.siis/config/connector.json",
		"/home/frederic/dev/trading/siis-rev/connectors/server.py",
		"/home/frederic/dev/trading/siis-rev/connectors/__init__.py",
		"/home/frederic/dev/trading/siis-rev/connectors/common/siislog.py",
		"/home/frederic/dev/trading/siis-rev/connectors/config/connector.json.template",
		"/home/frederic/dev/trading/siis-rev/connectors/database/ohlcdb.py",
		"/home/frederic/doc/trading/siis.sublime-project",
		"/home/frederic/.siis/config/strategy.json",
		"/home/frederic/.siis/config/strategies/ethusdt1.json",
		"/home/frederic/dev/trading/siis/database/pgsql.py",
		"/home/frederic/dev/trading/siis/database/mysql.py",
		"/home/frederic/dev/trading/siis/database/database.py",
		"/home/frederic/dev/trading/siis/database/candlestorage.py",
		"/home/frederic/dev/trading/siis/runner.py",
		"/home/frederic/dev/trading/siis/strategy/strategydatafeeder.py",
		"/home/frederic/dev/trading/siis/watcher/watcher.py",
		"/home/frederic/dev/trading/siis/strategy/boostedblueskyday/bbstrategy.py",
		"/home/frederic/dev/trading/siis/instrument/candlegenerator.py",
		"/home/frederic/dev/trading/siis/monitor/streamable.py",
		"/home/frederic/dev/trading/siis/strategy/strategy.py",
		"/home/frederic/dev/trading/siis/database/tickstorage.py",
		"/home/frederic/dev/trading/siis/fetch-binance",
		"/home/frederic/dev/trading/siis/fetch-bitmex",
		"/home/frederic/dev/trading/siis/fetch-ig",
		"/home/frederic/dev/trading/siis/watcher/connector/ig/watcher.py",
		"/home/frederic/dev/trading/igpositions.txt",
		"/home/frederic/dev/trading/siis/connector/bitmex/ws.py",
		"/home/frederic/dev/trading/siis/trader/connector/ig/trader.py",
		"/home/frederic/dev/trading/siis/connector/ig/rest.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasuba.py",
		"/home/frederic/dev/trading/siis/watcher/connector/bitmex/watcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/binance/watcher.py",
		"/home/frederic/dev/trading/siis/trader/market.py",
		"/home/frederic/dev/trading/siis/strategy/strategysignal.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/castrategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcastrategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fastrategytrader.py",
		"/home/frederic/dev/trading/siis/trader/connector/bitmex/trader.py",
		"/home/frederic/dev/trading/siis/trader/trader.py",
		"/home/frederic/dev/trading/siis/strategy/strategytrade.py",
		"/home/frederic/dev/trading/siis/trader/connector/papertrader/trader.py",
		"/home/frederic/dev/trading/siis/connector/bitmex/connector.py",
		"/home/frederic/dev/trading/siis/strategy/strategymargintrade.py",
		"/home/frederic/dev/trading/siis/strategy/timeframebasedstrategytrader.py",
		"/home/frederic/dev/trading/siis/terminal/terminal.py",
		"/home/frederic/dev/trading/siis/prefetch-bitmex.sh",
		"/home/frederic/dev/trading/siis/prefetch-ig.sh",
		"/home/frederic/dev/trading/siis/connector/binance/client.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/faparameters.py",
		"/home/frederic/dev/trading/siis/common/workerpool.py",
		"/home/frederic/dev/trading/siis/prefetch-binance.sh",
		"/home/frederic/dev/trading/siis/watcher/fetcher.py",
		"/home/frederic/dev/trading/siis/charting/charting.py",
		"/home/frederic/dev/trading/siis/strategy/service.py",
		"/home/frederic/dev/trading/siis/watcher/connector/bitmex/fetcher.py",
		"/home/frederic/dev/trading/siis/instrument/instrument.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasubb.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasubc.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/volume/volume.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasuba.py",
		"/home/frederic/dev/trading/siis/monitor/service.py",
		"/home/frederic/.siis/config/config.py",
		"/home/frederic/dev/trading/siis/config/config.py",
		"/home/frederic/dev/trading/siis/common/service.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casuba.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/rsi/rsi.py",
		"/home/frederic/dev/trading/siis/common/utils.py",
		"/home/frederic/dev/trading/instr.txt",
		"/home/frederic/dev/trading/bmaccount.txt",
		"/home/frederic/dev/trading/siis/trader/position.py"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 152.0,
		"where_history":
		[
			"*.py",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"str(",
			"EXCLUDED",
			"SIGNAL_",
			"def load_user_trades(self, service, appliance, appliance_id, market_id):",
			"store_market_ohlc",
			"store_ma",
			"process_user_trade",
			"_pending_user_trade",
			"_pending_user_trader_insert",
			"_pending_user_trade_select",
			"_pending_user_trade_insert",
			"user",
			"candle",
			"ohlc",
			"candle",
			"'candle'",
			"self._fees ",
			"store_market_i",
			"contract_ty",
			"store_market_i",
			"store_ma",
			"set_notionals_limits",
			"max_size",
			"CONTRACT_SPOT",
			"ig",
			"unit_type",
			"unit_type\n",
			"self._previous",
			"_contract_type",
			"commissio",
			"maker_f",
			"maker",
			"fee",
			"set_size_limits",
			".trade =",
			"v1/depth",
			"MODE_MARGIN",
			"MSG_MARKET",
			"EVENT_DISCONNECTED",
			"toto",
			"self._monitor",
			"recv_monitor_message",
			"monitor",
			"process",
			"_poller",
			"self._workers",
			"BLOCK",
			"__process_once",
			"stop(",
			"def stop",
			".stop(",
			"_quit",
			"StrategyClientWorker(",
			"StrategyClientWorker",
			"spec",
			"'rpc'",
			"'rcp",
			"idFunc",
			"ConnectorCore",
			"def fetch_",
			"fetch_",
			"list_orders",
			"ohlc",
			"LONG",
			"print(",
			"subscribe_trades",
			"subscribe_account",
			"account_id",
			".ig.",
			"fetch_account",
			"account",
			"__update_ohlc",
			"_subscriptions",
			"._subscriptions",
			"_subscriptions",
			"update_ohlc",
			"update_ohlc(",
			"update_ohlc",
			"update_from_tick",
			"update_from",
			"update_ohlc",
			".update_ohlc",
			"update_ohlc",
			"update_from_tick",
			"update_ohlc(",
			"update_ohlc",
			".update_ohlc",
			"update_ohlc",
			"_last_ohlc",
			"basetime",
			"_last_ohlc",
			"basetime",
			"Instrument.",
			"Instrument",
			"update_time",
			"self.service.notify",
			"update_time",
			"_on_tick_update",
			"IGWatcher",
			"Subscri",
			"Subsc",
			"Watcher",
			"_close_only",
			"_reduce_only",
			"_last_ohlc",
			"TF_MAP",
			"initial_subscriptions",
			"initial_fetch",
			".initial_fet",
			"initial_fet",
			"_account_id",
			"def account_id",
			".on_",
			"on_trade",
			"subscribe_tick(",
			"_subscriptions",
			"Database",
			"STORED_TIMEFRAMES",
			"def unsubscribe(self, market_id):",
			"ig_unsub",
			"ig_subscribe",
			"_previous",
			"_subscriptions",
			"insert_watched_",
			"_subscriptions",
			"unsubs",
			"_lightstreamer",
			"_cached_tick"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"func_id",
			"",
			"print(",
			"print"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "strategies/src/strategies/forexalpha/faparameters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4667,
						"regions":
						{
						},
						"selection":
						[
							[
								3937,
								3937
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1372.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "connectors/database/database.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15140,
						"regions":
						{
						},
						"selection":
						[
							[
								14466,
								14466
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5811.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "connectors/database/pgsql.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27354,
						"regions":
						{
						},
						"selection":
						[
							[
								19950,
								19950
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6910.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "connectors/database/mysql.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27440,
						"regions":
						{
						},
						"selection":
						[
							[
								16537,
								16537
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5710.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "connectors/connectors/ig/trader.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5071,
						"regions":
						{
						},
						"selection":
						[
							[
								1379,
								1379
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2181.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "connectors/connectorserver.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11664,
						"regions":
						{
						},
						"selection":
						[
							[
								11664,
								11664
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4567.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/frederic/.siis/config/connectors/igdemo.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 909,
						"regions":
						{
						},
						"selection":
						[
							[
								747,
								747
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "connectors/trader/trader.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18267,
						"regions":
						{
						},
						"selection":
						[
							[
								6916,
								6916
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2976.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 41.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 114.0
	},
	"pinned_build_system": "",
	"project": "siis-rev.sublime-project",
	"replace":
	{
		"height": 78.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"my",
				"connectors/database/mysql.py"
			],
			[
				"data",
				"connectors/database/database.py"
			],
			[
				"pg",
				"connectors/database/pgsql.py"
			],
			[
				"dat",
				"connectors/database/database.py"
			],
			[
				"mys",
				"connectors/database/mysql.py"
			],
			[
				"param",
				"strategies/src/strategies/forexalpha/faparameters.h"
			],
			[
				"para",
				"strategies/src/strategies/forexalpha/faparameters.h"
			],
			[
				"strate",
				"strategies/src/config/strategyconfig.cpp"
			],
			[
				"init",
				"sql/initpg.sql"
			],
			[
				"initm",
				"sql/initmy.sql"
			],
			[
				"p",
				"connectors/database/pgsql.py"
			],
			[
				"mysq",
				"connectors/database/mysql.py"
			],
			[
				".sql",
				"sql/initmy.sql"
			],
			[
				"mark",
				"connectors/market.py"
			],
			[
				"mar",
				"connectors/market.py"
			],
			[
				"market",
				"connectors/market.py"
			],
			[
				"datab",
				"connectors/database/database.py"
			],
			[
				"",
				"connectors/connectors/ig/trader.py"
			],
			[
				"pgs",
				"connectors/database/pgsql.py"
			],
			[
				"mysql",
				"connectors/database/mysql.py"
			],
			[
				".sq",
				"sql/initpg.sql"
			],
			[
				"indm",
				"strategies/include/siis/trade/indmargintrade.h"
			],
			[
				"client",
				"connectors/strategyclient.py"
			],
			[
				"conn",
				"connectors/connectorserver.py"
			],
			[
				"main",
				"connectors/main.py"
			],
			[
				"defa",
				"connectors/defaulthandler.py"
			],
			[
				"conne",
				"connectors/connector.py"
			],
			[
				"trader",
				"connectors/trader/trader.py"
			],
			[
				"or",
				"connectors/trader/order.py"
			],
			[
				"trad",
				"connectors/connectors/ig/trader.py"
			],
			[
				"rest",
				"connectors/connectors/ig/rest.py"
			],
			[
				"accou",
				"connectors/connectors/ig/account.py"
			],
			[
				"util",
				"connectors/common/utils.py"
			],
			[
				"ligh",
				"connectors/connectors/ig/lightstreamer.py"
			],
			[
				"connec",
				"connectors/connectors/ig/connector.py"
			],
			[
				"const",
				"connectors/constants.py"
			],
			[
				"connector",
				"connectors/connectorserver.py"
			],
			[
				"stdtra",
				"strategies.old/include/siis/connector/stdtraderproxy.h"
			],
			[
				"traderpro",
				"strategies/src/connector/traderproxy.cpp"
			],
			[
				"order",
				"connectors/trader/order.py"
			],
			[
				"de",
				"connectors/defaulthandler.py"
			],
			[
				"light",
				"connectors/connectors/ig/lightstreamer.py"
			],
			[
				"accoun",
				"connectors/connectors/ig/account.py"
			],
			[
				"account",
				"connectors/connectors/ig/account.py"
			],
			[
				"acc",
				"connectors/trader/account.py"
			],
			[
				"marke",
				"connectors/market.py"
			],
			[
				"pos",
				"connectors/trader/position.py"
			],
			[
				"res",
				"connectors/connectors/ig/rest.py"
			],
			[
				"handler",
				"connectors/defaulthandler.py"
			],
			[
				"cons",
				"connectors/constants.py"
			],
			[
				"connecto",
				"connectors/connectorserver.py"
			],
			[
				"handle",
				"connectors/defaulthandler.py"
			],
			[
				"orde",
				"connectors/trader/order.py"
			],
			[
				"hand",
				"connectors/defaulthandler.py"
			],
			[
				"han",
				"connectors/handler.py"
			],
			[
				"siislo",
				"connectors/common/siislog.py"
			],
			[
				"templ",
				"connectors/config/connector.json.template"
			],
			[
				"pgq",
				"connectors/database/pgsql.py"
			],
			[
				"def",
				"connectors/defaulthandler.py"
			],
			[
				"oh",
				"connectors/database/ohlcdb.py"
			],
			[
				"cand",
				"database/candlestorage.py"
			],
			[
				"ticks",
				"database/tickstorage.py"
			],
			[
				"fapa",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"bina",
				"fetch-binance"
			],
			[
				"fet",
				"fetch-bitmex"
			],
			[
				"conf",
				"~/.siis/config/config.py"
			],
			[
				"bi",
				"fetch-binance"
			],
			[
				"watc",
				"watcher/connector/ig/watcher.py"
			],
			[
				"marg",
				"strategy/strategymargintrade.py"
			],
			[
				"appl",
				"~/.siis/config/appliance.py"
			],
			[
				"fapr",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"fastr",
				"strategy/forexalpha/fastrategytrader.py"
			],
			[
				"fasub",
				"strategy/forexalpha/fasuba.py"
			],
			[
				"margin",
				"strategy/strategymargintrade.py"
			],
			[
				"watch",
				"watcher/connector/ig/watcher.py"
			],
			[
				"fapra",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"fasuba",
				"strategy/forexalpha/fasuba.py"
			],
			[
				"faa",
				"strategy/forexalpha/fasuba.py"
			],
			[
				"fap",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"forexalpha",
				"strategy/forexalpha/fastrategy.py"
			],
			[
				"margint",
				"strategy/strategymargintrade.py"
			],
			[
				"ytrader",
				"strategy/strategytrader.py"
			],
			[
				"marin",
				"strategy/strategymargintrade.py"
			],
			[
				"ytrad",
				"strategy/strategytrader.py"
			],
			[
				"margintr",
				"strategy/strategymargintrade.py"
			],
			[
				"ysi",
				"strategy/strategysignal.py"
			],
			[
				"faab",
				"strategy/forexalpha/fasuba.py"
			],
			[
				"runn",
				"runner.py"
			],
			[
				"assett",
				"strategy/strategyassettrade.py"
			],
			[
				"fast",
				"strategy/forexalpha/fastrategytrader.py"
			],
			[
				"ytrader.py",
				"strategy/strategytrader.py"
			],
			[
				"ytra",
				"strategy/strategytrade.py"
			],
			[
				"ytr",
				"strategy/strategytrade.py"
			],
			[
				"fa",
				"strategy/forexalpha/fastrategytrader.py"
			],
			[
				"fastra",
				"strategy/forexalpha/fastrategytrader.py"
			],
			[
				"stra",
				"strategy/strategytrader.py"
			],
			[
				"term",
				"terminal/terminal.py"
			],
			[
				"ter",
				"terminal/terminal.py"
			],
			[
				"fetcher",
				"watcher/fetcher.py"
			],
			[
				"pre",
				"prefetch-bitmex.sh"
			],
			[
				"run",
				"runner.py"
			],
			[
				"bit",
				"fetch-bitmex"
			],
			[
				"capra",
				"strategy/cryptoalpha/caparameters2.py"
			],
			[
				"castrat",
				"strategy/cryptoalpha/castrategytrader.py"
			],
			[
				"fasubb",
				"strategy/forexalpha/fasubb.py"
			],
			[
				"fasa",
				"strategy/forexalpha/fasuba.py"
			],
			[
				"volum",
				"strategy/indicator/volume/volume.py"
			],
			[
				"serv",
				"monitor/service.py"
			],
			[
				"work",
				"common/workerpool.py"
			],
			[
				"ig",
				"fetch-ig"
			],
			[
				"bitmex",
				"connector/bitmex/connector.py"
			],
			[
				"con",
				"config/config.py"
			],
			[
				"bitm",
				"fetch-bitmex"
			],
			[
				"monitor",
				"monitor/service.py"
			],
			[
				"papertr",
				"trader/connector/papertrader/trader.py"
			],
			[
				"fac",
				"strategy/forexalpha/fasubc.py"
			],
			[
				"rsi",
				"strategy/indicator/rsi/rsi.py"
			],
			[
				"fara",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"utils",
				"common/utils.py"
			],
			[
				"watcher",
				"watcher/connector/bitmex/watcher.py"
			],
			[
				"tradr",
				"trader/connector/bitmex/trader.py"
			],
			[
				"ysign",
				"strategy/strategysignal.py"
			],
			[
				"signal",
				"strategy/strategysignal.py"
			],
			[
				"ytrade",
				"strategy/strategytrade.py"
			],
			[
				"trade",
				"trader/trader.py"
			],
			[
				"wa",
				"watcher/connector/bitmex/watcher.py"
			],
			[
				"fore",
				"strategy/forexalpha/fastrategytrader.py"
			],
			[
				"ass",
				"trader/asset.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 249.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
